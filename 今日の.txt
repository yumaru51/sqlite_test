
①
↓まとめる。
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent

configフォルダにDBが作られてしまった。。。
一個上の階層にしたい。（たぶんformがあったので変更管理ツールだけ。）


1.os.path.abspath(__file__)は、現在実行中のPythonファイルの絶対パスを取得します。
（settign.pyに定義されているので、現在実行中(=カレントディレクトリ)はsetting.pyがあるパス）

2.os.path.dirname(os.path.abspath(__file__))は、Pythonファイルの絶対パスの親ディレクトリの絶対パスを取得します。

3.os.path.dirname(os.path.dirname(os.path.abspath(__file__)))は、親ディレクトリの絶対パスの親ディレクトリの絶対パスを取得します。つまり、Pythonプロジェクトのルートディレクトリの絶対パスが取得されます。

このようにして、BASE_DIR変数にはPythonプロジェクトのルートディレクトリの絶対パスが格納されます。この値を使用することで、プロジェクト内の他のファイルやディレクトリに簡単にアクセスできます。

この定義は、settings.pyファイルの親ディレクトリのパスを取得して、それをBASE_DIRに設定しています。つまり、デフォルトでは、BASE_DIRはsettings.pyファイルが存在するディレクトリの1つ上のディレクトリになります。

settingをフォルダに格納するので、更に一個追加で囲む。


②
外部参照キー関連名称
　「参照先テーブル (referenced table)」
　「参照元テーブル (referencing table)」


「登録日時」項目にはauto_now_add=Trueをつければ、自動挿入され、更新されない。
「更新日時」項目にはauto_now=Trueをつければ、自動挿入され、データ更新毎に更新される。

黄色はignore
home→isk-tools
sqlite_test→yumaru_app


③
使ってないライブラリ消したい。


④
デバックができるように再作成！

プロジェクト作成
ライブラリインストール。requirements.txtを丸投げ。
.gitignore丸投げ。
templateは丸投げ。staticも丸投げ。
django-admin startproject config .
python manage.py startapp fms
python manage.py startapp quality_change_management
★GITに共有
settings.pyを変更。不要なapp消す。
manage.pyを変更。db_router.py丸投げ。
★GITに共有
プロジェクトのurlを追加
アプリのurlを追加
★GITに共有
ここまできたら、一度デバック確認。test.py追加でデバッグ。
databaseをコピー。だがGITにはあげない。
各admin.pyを丸投げ。
★GITに共有




