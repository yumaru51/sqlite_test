
③
↓まとめる。
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent

configフォルダにDBが作られてしまった。。。
一個上の階層にしたい。（たぶんformがあったので変更管理ツールだけ。）


1.os.path.abspath(__file__)は、現在実行中のPythonファイルの絶対パスを取得します。
（settign.pyに定義されているので、現在実行中(=カレントディレクトリ)はsetting.pyがあるパス）

2.os.path.dirname(os.path.abspath(__file__))は、Pythonファイルの絶対パスの親ディレクトリの絶対パスを取得します。

3.os.path.dirname(os.path.dirname(os.path.abspath(__file__)))は、親ディレクトリの絶対パスの親ディレクトリの絶対パスを取得します。つまり、Pythonプロジェクトのルートディレクトリの絶対パスが取得されます。

このようにして、BASE_DIR変数にはPythonプロジェクトのルートディレクトリの絶対パスが格納されます。この値を使用することで、プロジェクト内の他のファイルやディレクトリに簡単にアクセスできます。

この定義は、settings.pyファイルの親ディレクトリのパスを取得して、それをBASE_DIRに設定しています。つまり、デフォルトでは、BASE_DIRはsettings.pyファイルが存在するディレクトリの1つ上のディレクトリになります。

settingをフォルダに格納するので、更に一個追加で囲む。


④
IMPORT

画面上でapp_nameを選択。
ファイルをアップロードする必要ある？
path指定してファイル取得の方が良さそう。
「apps.get_app_config(app_name)」を使って、ファイルを指定。
model情報から項目を取得して、リストに格納。
2行目からIMPORT。ifで項目の型が外部参照キーの場合だけ、特別処理。
インスタンスをIMPORTする。

関数名を変えたい
export_model,export_model_to_excel
import_model,import_model_to_excel


⑤外部参照キー関連名称
　「参照先テーブル (referenced table)」
　「参照元テーブル (referencing table)」
